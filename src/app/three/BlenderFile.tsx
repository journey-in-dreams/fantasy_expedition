/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/blenderStuff/blenderFile.glb -t 
*/

import * as THREE from 'three'
import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
    Sphere: THREE.Mesh
    Sphere001: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshBasicMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'CubeAction' | 'SphereAction' | 'Sphere.001Action'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF(
    './blenderStuff/blenderFile.glb'
  ) as GLTFResult
  const { actions, names } = useAnimations(animations, group)

  useLayoutEffect(() => {
    names.forEach((animation) => {
      actions?.[animation]?.play()
    })
  }, [actions, names])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Cube"
          geometry={nodes.Cube.geometry}
          material={materials.Material}
          position={[-0.071, 0.158, -0.271]}
          scale={[1, 0.031, 1]}
        />
        <mesh
          name="Sphere"
          geometry={nodes.Sphere.geometry}
          material={materials['Material.002']}
          position={[-0.62, 0.431, -0.79]}
          rotation={[-0.012, 0.107, -0.016]}
          scale={0.086}
        />
        <mesh
          name="Sphere001"
          geometry={nodes.Sphere001.geometry}
          material={materials['Material.001']}
          position={[0.4, 0.551, 0.152]}
          scale={0.409}
        />
      </group>
    </group>
  )
}

useGLTF.preload('./blenderStuff/blenderFile.glb')
